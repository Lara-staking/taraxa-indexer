package indexer

import (
	"encoding/json"
	"testing"

	"github.com/Taraxa-project/taraxa-indexer/internal/chain"
	"github.com/stretchr/testify/assert"
)

func TestDecodeTransaction(t *testing.T) {
	// Correct sample input data
	transaction_json := `{
		"blockHash": "0xa3505936a13302b1bdab9cbbff23c9d922842b738c0f18094717d072ae88be59",
		"blockNumber": "0x5487c",
		"from": "0x3aef315b67c2e23aae9e9c1174d05371e2c9b144",
		"gas": "0x5b8d80",
		"gasPrice": "0x0",
		"gasUsed": "0x5af868",
		"hash": "0x9388dfe7caa6cbf19bd6b9508b94e563a32d23d303bf019974bdbcc324c953b7",
		"input": "0xd2d745b10000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000dc0d841f962759da25547c686fa440cf6c28c61000000000000000000000000f1c587a22fbf80af80446fa17e7322952f18456c000000000000000000000000cddb0d484ca1c625ffca0882396ef34ffff242e300000000000000000000000010ce6f9c7c22f82214c40755b3eea5f126a7148d000000000000000000000000d42eaa28c5eafee9a0040a7ac74dd3f4b57678bd000000000000000000000000ec15db470db85cc75b0e3fa5b6a0c607a5e8c64a000000000000000000000000a4195def477491ef7f00b8688c9b8032cd71bb2a0000000000000000000000008f1567bb4381f4ed53dbeb3c0dca5c4f189a111000000000000000000000000052124d5982576507dd4a18d6607225e64be168bb0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000",
		"nonce": "0x0",
		"r": "0xe41fe3baf6ef792fa3d33af556767c84528ee3b8387fcd94d33fb3f12bff2d03",
		"s": "0x4d4462271713d1b1808368952cf44bef70fdd8304246cf5ee0ffa38d771b55d9",
		"to": "0xf3b803a8f4c4fc3fbe454b6438dc0ed22735f01b",
		"transactionIndex": "0x0",
		"v": "0x0",
		"value": "0x82f79cd9000",
		"data": "0x2ada8a320000000000000000000000003aef315b67c2e23aae9e9c1174d05371e2c9b1440000000000000000000000000000000000000000000000206f62c0f445450000000000000000000000000000000000000000000000000000000000000000719900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000041dd69f77d6f94270a009a6917015acd44eab669684a2f24004d8807d9cae501de57126b392a58df3b4bd5591d0547d0f5b2aaf192f668aae7616ce86f71c861571b00000000000000000000000000000000000000000000000000000000000000"
	}`

	// incorrect_transaction_json := `{
	// 	"blockHash": "0x3c8813fdae9b0bcdb2fb2a8bffd7c89ed06f84229a5e968bb9ba534a6606e606",
	// 	"blockNumber": "0x5487c",
	// 	"from": "0xfb1b6f568a9c5db31a46fd9f9dec0d96a5f4f5ea",
	// 	"gas": "0x5b8d80",
	// 	"gasPrice": "0x0",
	// 	"gasUsed": "0x5af868",
	// 	"hash": "0x1312631675d90f8625f6661bb384708d7b020f1894e12d34616c6258e6edf372",
	// 	"input": "0xd2d745b10000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000dc0d841f962759da25547c686fa440cf6c28c61000000000000000000000000f1c587a22fbf80af80446fa17e7322952f18456c000000000000000000000000cddb0d484ca1c625ffca0882396ef34ffff242e300000000000000000000000010ce6f9c7c22f82214c40755b3eea5f126a7148d000000000000000000000000d42eaa28c5eafee9a0040a7ac74dd3f4b57678bd000000000000000000000000ec15db470db85cc75b0e3fa5b6a0c607a5e8c64a000000000000000000000000a4195def477491ef7f00b8688c9b8032cd71bb2a0000000000000000000000008f1567bb4381f4ed53dbeb3c0dca5c4f189a111000000000000000000000000052124d5982576507dd4a18d6607225e64be168bb0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000",
	// 	"nonce": "0x0",
	// 	"r": "0xe41fe3baf6ef792fa3d33af556767c84528ee3b8387fcd94d33fb3f12bff2d03",
	// 	"s": "0x4d4462271713d1b1808368952cf44bef70fdd8304246cf5ee0ffa38d771b55d9",
	// 	"to": "0x00000000000000000000000000000000000000aa",
	// 	"transactionIndex": "0x0",
	// 	"v": "0x0",
	// 	"value": "0x82f79cda",
	// 	"data": "0x5c19a95c000000000000000000000000414d739c4dccfe47d475cc08274b9e735a7941bd"
	// }`

	var trx chain.Transaction
	// var wrong_trx chain.Transaction
	_ = json.Unmarshal([]byte(transaction_json), &trx)
	// _ = json.Unmarshal([]byte(incorrect_transaction_json), &wrong_trx)

	functionName, params, err := DecodeTransaction(trx)
	t.Log(functionName)
	t.Log(params)
	t.Log(err)
	assert.NoError(t, err)
	assert.Equal(t, "claim(address,uint256,uint256,bytes)", functionName)
	assert.Equal(t, []string{
		"0xfb1b6f568a9c5db31a46fd9f9dec0d96a5f4f5ea",
	}, params)

	// _, _, err = DecodeTransaction(wrong_trx)
	// assert.EqualError(t, err, "abi: contract missing")

	// _, _, err = DecodeTransaction(wrong_trx)
	// assert.EqualError(t, err, "transaction data is too short")
}
