// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z4Y/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
