// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/api/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressFilter) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressFilter) error
	// Returns total number of DAG blocks
	// (GET /address/{address}/total-dags)
	GetAddressTotalDagBlocks(ctx echo.Context, address AddressFilter) error
	// Returns total number of PBFT blocks
	// (GET /address/{address}/total-pbfts)
	GetAddressTotalPbftBlocks(ctx echo.Context, address AddressFilter) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressFilter) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotalPbftBlocks(ctx echo.Context, params GetValidatorsTotalPbftBlocksParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address)
	return err
}

// GetAddressTotalDagBlocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTotalDagBlocks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTotalDagBlocks(ctx, address)
	return err
}

// GetAddressTotalPbftBlocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTotalPbftBlocks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTotalPbftBlocks(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotalPbftBlocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotalPbftBlocks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalPbftBlocksParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotalPbftBlocks(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/total-dags", wrapper.GetAddressTotalDagBlocks)
	router.GET(baseURL+"/address/:address/total-pbfts", wrapper.GetAddressTotalPbftBlocks)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotalPbftBlocks)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yYTXPbNhPHvwoGz3Nk9BpJtk616yZxZ9J6WiU9uD6A5FJCTAIMsFSk8fC7dwBQIiVR",
	"FmXZnum4OnHExX+xu79dkHyggUxSKUCgpuMHqoMZJMxeXoShAm0vYcGSNAY6pp1Fp+GPehSXqVmjUXEx",
	"pbm3kvzAYwT1rMJT2JDrDkfD4Vlv1Bl4NJIqYUjHlAscvi9Xc4EwBWWW/ywzgUYgVTIFhRxs2CiRxebi",
	"oETuUQXfM64gpOPbYuHd2k763yBA4+mKTXf9MLf7/yuI6Jj+r12WpF3Uo20CzD06Y3p2yPSTsck9GsMc",
	"mu3eo6iY0CxALsU6F8cGbfe2clsj6dk465LyqYiqSsMg7PWi9+e9Yb/fHfVh1B0F/tnQD8J+r9cbjQDg",
	"3I8GoT/qQzQ6CwdRN4zOBudnbACd98NRVEfJjR/ha2VfZInvGH/d9Bd+j8r/pDQ9JT1+LIP7hhFHSiYH",
	"ZYsBlHt0yvSN4gFsUVJX5CnTX7RJyUHLY8rJRQiLhrFpZJhtzk1UGaxNfSljYMIWXh6RhDmLs8MZqMfC",
	"1WYVR5F/63+lW2aukm7HzDqkOni+spiHDKWqQac8QRqGmPoRPrkDVu6qMnU7/gvgvjyCNrf8A8AiHELE",
	"shjpuLt5gPR71KMJFzzJEntzt/xLYGpDotfp9R9TcfcPBGc3VojvBpVbRCNLUyAFssBmEBLGYzpe/fUT",
	"MsUWrMVN1QVLjMLE/kUmwAwPmTLmM8RUj9vt0jz3aAg6UDx1Q4JOZkCKpdcGKVBEszlowuKY3Fx+mJBL",
	"Q5z2yNXFx+KaMBGSyqzRRAqCpVAwY1xYI1ikUhsxQS5urq2ZTImMCM4YkpAhc1cBE8QHkmkIt7R+WaSx",
	"VHYQxjwAoW3jFDF/vp7sxJpwfFdYtqSatm13cowrOSoCNR0DSrs8dFudVsfYyhQESzkd0779y6Mpw5ll",
	"ql2A2X4oLvJ2yKb21hTQoVLN7R+AmRIulSZ7vsueBoHEX9ooNcQQIISkUPxbULsFxYzGdUjH9CNg0VhX",
	"xpnZj2IJIChNx7fbPgtTgpJEtjWIv7Si3Nw1oZTIlH1WAuoGnOvohv1etGCe3xkhnUqhXQ/2Op0Vx+Am",
	"AUvTmAc2tvY37U6pZr7M85btjq1wya9//v4bce1DbHtwwcWUMBJzjQY1k31LHOwUwQzPfWWwrorG307y",
	"FwGL1C0ApaQy5ua8yJKEqeXeypvJZ3m5XT+T35l1NVyZwdcMLNujRVCpkmEWQPgkum6syzeKl32iPJmv",
	"I2vxbIhV/B7BmH25eddogllT4h5JTbDHNNJ+4iZG9YpNL1c7f5PoueebY9gziX6kImvyIqleFL39ezia",
	"wmbzbtthbb89EvUBFM0Q+I/F01k8tiwvAuMTZ2LlqbbR8Vtd4Magee5F+QQEq67fKH/VDxgnn8abpXlh",
	"/LZZ2MvcfPWa3Yyv0nw3BPMq6XCbwZ72wxks1z1Yj9/XckMHqDPv23uQ+56BWpbMOYsnI1d5sT+dN46Q",
	"HPx0UX78yNfv5EwptnwEQ3vfJLys0XPSNK/WZcVSpVjbOLXXX7lPP0O52KTsEDlHHp//TpBe9eB83WNx",
	"EysjBGpeX7vPjAsBSATgD6nud76/cPdxpZU4u1b129O21gQ0NtFCZ/eo1hXMm0iF1qyqdJf/EwAA//+j",
	"w65NPBsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
