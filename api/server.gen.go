// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uOyiKrRiZU33m78DAAD//wIMM9quIwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
