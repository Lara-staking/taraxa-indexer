// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d1DWDWyGiIrMMFfSw/6/AQAA//++/Y8ANTQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
