// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
