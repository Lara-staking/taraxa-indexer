// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kq63/wsAAP//PP1CEXA/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
