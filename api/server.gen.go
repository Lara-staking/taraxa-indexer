// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressFilter, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressFilter, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressFilter) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressFilter, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
