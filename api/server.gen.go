// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressFilter, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressFilter, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressFilter) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressFilter, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
