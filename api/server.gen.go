// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"so+oyA7zJd1s/hcAAP//0W2T5Ys/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
