// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xa33PjthH+VzBoH2lLlhPfVU+9xE3uOs3Fk1Oah6unsyJXEmISYIClT5ob/e8dgBQJ",
	"/rJIWdd4zk8SCewu9vv2A7DWZx6qJFUSJRk+/8xT0JAgoXbfIIo0GnNnH9rvEZpQi5SEknzO3+RvGSm2",
	"EjGhZsvdfyQPuLBvU6AND7iEBPn8YIkHXOMfmdAY8TnpDANuwg0mYK3/VeOKz/lfJlVIk/ytmRS+fnB+",
	"+H4f8BTWQoINpSe8u3JAFdQfGepdFVVl4+TAKi9ebJ8QH3qi+g3xoSdjjeCsET40DGuW763v4omdUCTN",
	"fsQtJGlszU6304F/POC0S+0cQ1rINd8HvI7DGQ1/rzJJv6BJlTTomKhVipoEuvhJEcTHkuBsFBBUaH4s",
	"Jt+XXtXydwyp9NpYyNXsOuArpRMgPueZkHTzTRWxkIRr6yPgt7BuB7oBszkW51s7Zh/wGB9x+KICblBG",
	"ebADSsVOIJGgIUjSY3MW5UA7S4M0EFrCOuenpr0IN8hzclhuh30/0C6UbmFtijrDyOcIxPHPKz7/OKhE",
	"van7+6ABWwTkakwQJma4aUuB/f2+jBm0hl1eh28LIpxSIGMK519gaOHjXBH55tXNzevZq+m3XXyWWRzD",
	"0o7L5a7B74BvLxSk4iJUEa5RXuCWNFwQrF16dJzyOZcidqh3glNPMMpoBNM3YN7jlnL5XEEWUyPMpVIx",
	"gnRVQaBphO0zSMnBaeCWVYXbRd7WBtFKTSwSUV/q9bQLsQS2IskSPr+aTgOeCFl869KmMimlzekJJGiu",
	"Po+0c5XLFbVXBhlt1BjBGqOeMkuWx9XQAz5drujtCAd/rnoWuSvVs4y+XPkJSmpheqFS6hjUo6V3qIWK",
	"OkXlFghH4TNaWkZ6aG6CpYmgDPdpwfhAQKZfSCNYm3HECngMhm5hvRhK6PqeUhiwAD3PwqKi6+mGbB2M",
	"Xb9XJ+ZZRVk5Dzwguhx05awDiCcS08WNUzb69ubguWvzaxmr8OH9WG1daZWM0Pk1mDstQhzhYQ3mV4Mj",
	"DxHDNxMlR0VjCCir36z6ROTEbUSNOedXgL6TEW7HlIaL10qpPUt8nAZXwey+QaPXvPN4aKdcPIK291Xj",
	"Dkc2jJV7GypJGkL6bwhxXPuuMb9wW6V/hDjDxiG5fcZt1GCxH/o87chAQUmXyIOjikQeAw/Y+0CV+Bax",
	"dJaiV/Ivc0f1y7xnY/03xCICUh2nUqiaBwNZeIoya5APdS0bIGGD7iYX+Qp95jhngdeLqiLuQrhMzgvF",
	"twKvA928CTWkbVQFZvP1WzGrHuHBVnli8mESkq5nvH4jOXaxCPgOQddMzqa1xkvL6mw6mw26sbSArK1y",
	"cHrzllpwBN78ZLpv88dGIuTKybhVPwhdXWACIubzw6O/E2jYwqVQVeNv4R6xBYLVr0zb4Rui1Mwnk2r4",
	"Pmh0FhcbZMVUJ4GomYFHNAzimN1998OCfWcl0wTs9s2PxWcGMmK+kjElGVWGwg0I6QbhNlXGGpPszd07",
	"N0ylTK0YbYCYZXD+KQTJlsgyg1HD1j+2aay0K99YhFhgUaz5p3eL1loTQRfFyEul15N8M6XYy1GxUKvw",
	"qE2eh6vL6eXUjlUpSkgFn/Nr9yhwPWnH50mhAZPPxYf9JCrUY43U7tr+gpRpmafSZm+ZZ8+gJLbcuVUa",
	"jDEkjFhh0fV1bQ257e5dxOf8R6RCLm+ts6DWbe9hYzVkUuvG9xHTG9/skFuS6qIM3FJn0+mBnZirNqRp",
	"LEI3Z/K7yY+HVQN6cE/MdKmeq4jGfxDYPz/8/J7lJcNcSQgp5JoBi4UhSy+bcccybCXebvB9qXeuCmFp",
	"gvmrxG2aT0CtlbbD7ZEuSxLQu1607T7kOPKxbKzf23kdXLL7yjAyubosFpVqFWUhRicxyt3sv1ZK9bQt",
	"zsCpkfk/G608vyN4ZU+lx3nlepQsbxLZdXq+Ar+IWtpfJmCl9HgGur7FMxn4XDo9RaJ6X2UMc2wqnkjq",
	"oLydhTkO/9JLdY4dyh+/TTFInvwJud5a0pAazw6faF+rTD19JTyDWtXh+MJka+LfyzNXGh+yNI13A7XJ",
	"uMHdfFl41p6JWv0OE2Zao6Qq0KrpcDW7/ubbm1ev/9bVfehA7fvcVG01DGx9aoedYa7hwEKVxZE9Dqca",
	"iXZsKdbnQsd37SHjZy9H57G8xQ6q+Gp4m2D2FpgLwAZ7pJA2uCv1sBvg6lo9Wgeq31W8XBF4qmvwlAS4",
	"e7tNZ4XAOSv50c/6gS0eFE2yTMp/k5561qi2RSHrHDrGi0XxT9aTyfEljxH1H6qc8RhxXmXodDEQ+vLA",
	"cBR+IVeKwVJl5FZX2ujWjiO4f/Fjwf+JIV5f7hg7Pgna+EksE3guMvQB1MsE9zMj/XhAoO72JxBSIjGJ",
	"9Enph1bHRuTtmMskH3fpd6uathZoaIgtysc9aesWH4eYitww39L9/n8BAAD//xHtXpMBKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
