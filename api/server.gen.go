// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
