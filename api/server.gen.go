// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
