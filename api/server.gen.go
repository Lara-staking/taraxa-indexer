// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
