// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//LXWhNv09AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
