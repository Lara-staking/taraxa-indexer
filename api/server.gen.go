// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
