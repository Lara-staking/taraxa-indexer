// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD///d/Fl/iOgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
