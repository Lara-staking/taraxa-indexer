// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressFilter, params GetAddressDagsParams) error
	// Returns total number of DAG blocks
	// (GET /address/{address}/dags/total)
	GetAddressDagTotal(ctx echo.Context, address AddressFilter) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressFilter, params GetAddressPbftsParams) error
	// Returns total number of PBFT blocks
	// (GET /address/{address}/pbfts/total)
	GetAddressPbftTotal(ctx echo.Context, address AddressFilter) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressFilter, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressDagTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDagTotal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDagTotal(ctx, address)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressPbftTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbftTotal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbftTotal(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/dags/total", wrapper.GetAddressDagTotal)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/pbfts/total", wrapper.GetAddressPbftTotal)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
