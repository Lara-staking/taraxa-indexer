// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/w4AAP//zK4jEFwjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
