// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7ne/BwAA//+DpNHLXCMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
