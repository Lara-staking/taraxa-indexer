// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
