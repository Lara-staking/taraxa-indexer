// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressFilter, params GetAddressDagsParams) error
	// Returns total number of DAG blocks
	// (GET /address/{address}/dags/total)
	GetAddressDagTotal(ctx echo.Context, address AddressFilter) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressFilter, params GetAddressPbftsParams) error
	// Returns total number of PBFT blocks
	// (GET /address/{address}/pbfts/total)
	GetAddressPbftTotal(ctx echo.Context, address AddressFilter) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressFilter, params GetAddressTransactionsParams) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressDagTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDagTotal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDagTotal(ctx, address)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressPbftTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbftTotal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbftTotal(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressFilter

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Required query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, true, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/dags/total", wrapper.GetAddressDagTotal)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/pbfts/total", wrapper.GetAddressPbftTotal)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUZPTNhD+Kxq1j+4ld9cenTwVSoHrDHBDQ3mg97CxN4k4WzLSOiTD+L93JCuxndiO",
	"EwJcO8cLvni1q939vk9rfeahSlIlUZLho8/chHNMwD0+jiKNxj3iEpI0Rj7iw+Ww5z8ecFqldo0hLeSM",
	"58Ha5TMRE+qTOp5hzd351aOrq18vHg1/CfhU6QSIj7iQdPVzuVpIwhlqu/x3lUl6gyZV0jhHqVYpahLo",
	"0idFENuHva7ygGv8mAmNER+99wtvN3Zq8gFDshGfwmw3DhRZ/Khxykf8h0HZmoHvy8Ammgd8Dma+z/SF",
	"tckDHuMC++0+4KRBGghJKOlqckzSbm/rsA0uA5dnS1HMDcyEBMKo2g6I49dTPnrfnfDu0vw22CpxBAT2",
	"f0GYmP6ubbvy23yzZ9AaVjy3qb/wrTgGyodAvLEw9eRQRn1BMQfzCpeuvxFOIYuJj0hnuAk8USpGkNbW",
	"EGjq63jDlZKLwZG8WUcOXGLlnpug46sjlCzFpV6cWCSinu/lsL6zywse8ASWIskSPjofDgOeCOn/amLL",
	"AYXJm/Y8mdK3EgGZJZOiKt9WBXzcg2TA1uWe6oBrWYsQjMsMv6Srk1iFdz0bNdUq2evWH+N5wGdgbrQI",
	"cUuumtRmBuatwaiH5SEoFDLCZc/cDAFl9emjTaBIHVCEBcTZ/go0o7nozToPX38Xf+23rFyl3AXUNyk1",
	"Yb4CnnsK/Sq8WxjwN8QiAlIN6gvlMNmzT+lkSkerzzpc1U1T2Tc7vqdFLyvaUvJ3iHdtJ94nxLvagXfe",
	"dN51nnArBF1zcTG8uOzyUrzf0x23Me98tyu5E4qp43SoJEHoIIAJiJiP1j/9RqBhCWfCck9CYj2M3U9s",
	"jGBZmWlrPidKzWgwKM3zgEdoQi3SQqr5eI7ML722xEbNDCzQMIhjdvPk2Zg9sbw3AXv6+Ll/ZiAjViUt",
	"U5JR6Sicg5DOCJepMtaZZI9vrp2ZSpmaMpoDMYuL4ikEySbIMoPRlq8/lmmstDtFYxGix6bP+eX1eCfX",
	"RNBP3vJM6dnAaaSguFIjn6jVLdSmqMP52fBsaG1VihJSwUf80v0U8BRo7jA18MwafPYP+SCCmXs1Qz9e",
	"VWv7BinTsiilrd6kqJ5BSWyyclkajDEkjJj3+I/kbgvajXPXER/x50heGewngtuPhgQJtXEUqsf0powU",
	"mzpqsMnKORX2rU2lhEwpFCVAi2OmoGBPwfIUzPNgezPlYFpu4WOGelXuId2Y8L5hd8bd3EqO9vrj2nEx",
	"HK4ZhIWIQprGInSrBh9MMaWU4Xp/CJkmvXOs3WoD+/Ov169YQWvmaCukkDMGLBaGLAUsKhwTcAcc9mht",
	"g4cL5QVpu95vJS7TYgFqrbQ1t9NEliSgV62ItEeKw/H7zb3HrV3XgvfB5jOnE/XOihUzsE30kCQ7OTD2",
	"H0j3lgdfisauWPXbmkOQZ0vd0ZNUqygLMWJTpb8q9tr3cAAO7WTTT3jdGbad4zHq677MHuT3+8lvy6fx",
	"CfT3QIycTIIrcQ/F/pEi3JhpB+O76fCgxCdT4kMb81Wk+Dg8Vm63+klydUExBthvBVKHg7D6EfIgzd9P",
	"mrtvcE6g0HXIfGVabGO0lQuLzQ1KL9yX5rspfEK8K2gwxxZZoDmuNtrQTIvySmcfG97ZeM1U2MKhv7A4",
	"jgiVK5r/Pwu6LtS6OOCutGy3S4CcEsqLKijWQK4gZRvLpxwthKxDfB9se00U/bFbWJwGvf/JWeLbTgp1",
	"UFlHqBfNPXwJQkokJpE+KX23c40niju6s6SwO6teYW77GqOhPr6osOv09RQXfVxFzqzq6Tb/NwAA//8m",
	"R886TyIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
