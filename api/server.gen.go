// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tG5gM4RUZJa5lB72/w0AAP//DJ53dBs0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
