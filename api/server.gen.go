// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3W/bOBL/VwjePdwBSuwk/fTTZZvdbQ/dbtB6b1H0ggUtjWVuJFJLUq6Nwv/7gRQl",
	"URJlS47bCxabJ9sih/Pxmw/OKF9wyNOMM2BK4tkXnBFBUlAgzDcSRQKkvNU/6u8RyFDQTFHO8AxfF0+R",
	"4mhJEwUCLbb/ZTjAVD/NiFrhADOSAp6VlHCABfyRUwERnimRQ4BluIKUaOp/F7DEM/y3Sc3SpHgqJ/as",
	"H8w5eLcL8CLh4f27PO1h7jv9GL3L0wWImqk/chDbmquSxgIEHsrJK56zkocVkaue818TuUJ8idQKEFWQ",
	"/kMJwiQJ9eN/apXFoFBEFEFLLvq0pukfrTLNgeEyIzFlRB/cw+tttaBXUzWNo/mpT3Gs+BngvoerXwHu",
	"e7DVYk4TGWw/TRbv9Nn2F73hOgy1WY0HCJ6BUBRcDxgIT6xxSRLCQtA7YEPSLNEcTnGA1TbTH6USlMVG",
	"+FqPnxwHKQncVVv44ncIlSZ+XbPjEN9MB/51uahIWpuckPArkiQ3RBGPUkWcp2XE0c5hPnQI2B+IEGSr",
	"vy9zZtznA40ZUbmAPm4PKrtLKXCY8ineeP17kBlnEroSKa5IMiZyuNwUm3tPbVnl4vIqwEsuUqLwDOeU",
	"qWdPaoEpUxDrMwJ8Q+IuoyaiDAocAU5gDcOFCrAEFhXMDnQVRVOQiqTZoT3zaqHeVQfSV6XTHqN2y25Q",
	"RtlCXA99l1GflW5ILG1wg8jFCEmSn5d49mlQXHS27u6Cltki60eVswwjrSGwu+u4ktbE92tg6i2PTxHy",
	"Su46Hpzw+A2LYDMCREVI99AylcnIiCEg5Wtt7WrtgvMECDOLeUbDkQQdbLwe4UnOtnH6aEG20mfg5Auj",
	"fau4Sk2VeLUSutx7GPPhu5T0mMQwJmG85kkE4pG6Ulkh9LjTG20vRpJ5rVDZny6O5MEh7uWjCRZziF71",
	"lkg1d0NtnUuePX/27MXl8+lTX0pheZKQhV5XlHmtFBPgzRknGT0LeQQxsDPYKEHOFImNSCLJ8AwzmhjG",
	"vEZtKgVYNCJOrIh8BxtVlI1Lkieqxabj6VIRoUbQPkE2Lw8NjFg1uz7/6hTGHdUkNKVNUa+mPoulZEPT",
	"PMWzi+k0wCll9puvPKiUUtGcHgGCToQynHqlXCx99XWuVnxMzTCmgGHFzW644bPFUo2K6//XAsbqripg",
	"Ku4ryY8oZrSZHmkINgjqib+3ICiPvEHlhigYZZ/RoWXkCe06tCIRVOzuDxgfFFF7s0ssxwErwAmR6obE",
	"86GAbuYUS0Ab6GEUnAx3PCHtB2Pld/xEPsgp68MDxxC+A3w68xhij2J82Dgm0XeTg1tpzL5gbnoyOid+",
	"wiFJkqK0aLu1200brvmK3qEtZTthF+Cl4OmInBETeStoCCO4ion8RcLIgmR4YuJsFDdSEZU3uz59AenI",
	"lMTHXNuPvc2U/OqwrOuST9PgIrgMroInwdO7FjBfYG/BqTeerYnQtx1pyi3NzNI8DTlTgoTqNw2pxncB",
	"ZeuS2jr9N2df9VubgOdBSUlnoTVJ8tF9Ppurm53njkYtxI1hyoNqUDqILrHkGr7Ci+XFGybqE9/y+PRX",
	"laq9MOKe4t6dHmcFcugCtgvwf0hCI6K4OEVj5ZhMJgi7b8b+ASF/0F3urJDQtZ05zG1G1Bz7UFcp55Ha",
	"tzaex7rFsGLIeKFmTOvrV7uryWFJq6owXTNRpq4ucfMGd+giFuAtENEgeTlt9Io7VC+nl5eDbngdQzak",
	"HKzeYvQSHDBvUcnvfPj5SCHZ00HQMdPM/Ubd9cfu2GomWmE/uHj58uXB2F/sDBw+6/PvDFYoW5pMrBMO",
	"CY3bQ0pogmflT/9SRJANOae8nn/NzU9oDkSnjFzo5SulMjmbTOrlu6A1YJuvANmtJuuAQJKsQSKSJOj2",
	"ux/myLAmA3Rz/aP9jAiLkBuoEWdmxmkJhStCmVkEm4xLTYyh69s3ZhnPiokosZNP8ykkDC0A5RKiFq3v",
	"N1nChYlOCQ3BmtzK/NObeUfWlKozu/Kci3hS1EMqcXRkBdVJFYQs9HBxPj2f6rU8A0Yyimf4yvwUmHGs",
	"gdbEhrjJF/thN4lscIxBdYeX70HlghWq1NpbFNqTwBRabI2UEhIIFUTIUjTjTQ1nU2G8ifAM/wjKZoMb",
	"fVjQGM/3OFu9ZNIY3/f5nbO+PSjWPiistxlRL6fTEp1QJCWSZQkNzZ7J77K4LdRz2MFTCukL6sYjWq8c",
	"oH9/+PkdKiICMi5BGWUxIiihUml4aY3buXtb8drv+lRvjrJxs23MXxhssmIDCGHG9WZ+nKcpEdtea2vv",
	"Nhj5VM1t7/Q+D5Z02hwGJuOXVqhM8CgPIToKUabR82eFVE8X6wSYGqn/k8HKOXcErvRF4DCuTMsaFT1D",
	"LadzVuA6USf2VwpYcjEegaaN9UAEPhRO+0DUbLONQY5WxR6lDtLbSZBj7F+dUpfpQ/Hjdq0GhSd3QxFv",
	"NWgUH48OF2h/1jC1/8Z7gmjVNMdXBlvb/iNwVtXUewFmVrXRjIhCMoOQLqmOxNrB9uLqoy3Cvy6gmm8n",
	"fiM4Na9HXvi8yoXQpVARnQqFEh0nhMGQRKbXhEKeJ5EuyzMBSm3RgsanQonXiL1QWRXvBBxOYSuo8D+/",
	"fn+NFL8Hhuz2IgitgApk367riT32FYTR8Dh5/Gi9tVVrYWRHo/edCm/7qhcvo1SrYUQspM5KaGWEigpf",
	"8msCbDQUHPCV9i/AZ5zkQ55lyXZgDSXNYj+25g61k6IjLGxUM1o3Ji4ur548ffb8xUtfY/pgeCik+cbx",
	"wT3asYyrPcc6HwclDqm4gKgR9KwcCZcgtbztHGIrtz2mPC6R/JUY9hu+7JGVdnesbM1eVxiTLysiV7tJ",
	"c6gzplwtdzYLJV081d/RZ6pWDjz0mX5Y+F4CGw2Q+n8KvhE49r669pAa9AHKPQmgvOe7wZ7IVT+oEj6w",
	"vacXeuptn2SoJ5w0h3GPHzJ908MBaDG1Rj9mYA2KoSTmY1R6ErTAWoe/ypjOpM+LmHU1yhoEknp59xr2",
	"GeC+LEt6GgZqBduqa+AHUT1bG42f+p9wHu9Ved/ocB/sCrzxpWOBU953167WS5g4pmiDZVK9W3psR65u",
	"HlHWxNAhXMztm6lHg+NrNtua/2BzwmbbacsT7xEDTV+1Ow6an7IlR2TBc2Wkq2j4Y8cBu3/1Xsc3Qogz",
	"nD+EDpMnHCVWCjxdaeE3UC8SzL9HiXVpgeaxPxHKGCjEQH3m4r4z16TF0PI8LdaduzPdNq05SDWElirW",
	"7aV1A+shpCKzzKV0t/tfAAAA//9G0lCAWDwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
