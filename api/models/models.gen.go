// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package models

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Address defines model for Address.
type Address = string

// AddressFilter defines model for AddressFilter.
type AddressFilter = Address

// Age defines model for Age.
type Age = int64

// Count defines model for Count.
type Count struct {
	Total int64 `json:"total"`
}

// Dag defines model for Dag.
type Dag struct {
	Age              Age   `json:"age"`
	Hash             Hash  `json:"hash"`
	Level            int64 `json:"level"`
	TransactionCount int64 `json:"transactionCount"`
}

// Hash defines model for Hash.
type Hash = string

// PaginatedResponse defines model for PaginatedResponse.
type PaginatedResponse struct {
	Data    []PaginatedResponse_Data_Item `json:"data"`
	End     Hash                          `json:"end"`
	HasNext bool                          `json:"hasNext"`
	Start   Hash                          `json:"start"`
	Total   int64                         `json:"total"`
}

// PaginatedResponse_Data_Item defines model for PaginatedResponse.data.Item.
type PaginatedResponse_Data_Item struct {
	union json.RawMessage
}

// PaginationFilter defines model for PaginationFilter.
type PaginationFilter struct {
	Limit *int32 `json:"limit,omitempty"`
	Start *Hash  `json:"start,omitempty"`
}

// Pbft defines model for Pbft.
type Pbft struct {
	Age              Age   `json:"age"`
	Hash             Hash  `json:"hash"`
	Number           int64 `json:"number"`
	TransactionCount int64 `json:"transactionCount"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Age      Age     `json:"age"`
	Block    int64   `json:"block"`
	From     Address `json:"from"`
	GasPrice string  `json:"gasPrice"`
	GasUsed  string  `json:"gasUsed"`
	Hash     Hash    `json:"hash"`
	Index    int64   `json:"index"`
	Status   bool    `json:"status"`
	To       Address `json:"to"`
	Value    string  `json:"value"`
}

// Validator defines model for Validator.
type Validator struct {
	Address   Address `json:"address"`
	PbftCount int64   `json:"pbftCount"`
}

// WeekFilter defines model for WeekFilter.
type WeekFilter struct {
	Week int32 `json:"week"`
	Year int32 `json:"year"`
}

// GetAddressDagsParams defines parameters for GetAddressDags.
type GetAddressDagsParams struct {
	// Pagination Pagination
	Pagination *PaginationFilter `form:"pagination,omitempty" json:"pagination,omitempty"`
}

// GetAddressPbftsParams defines parameters for GetAddressPbfts.
type GetAddressPbftsParams struct {
	// Pagination Pagination
	Pagination *PaginationFilter `form:"pagination,omitempty" json:"pagination,omitempty"`
}

// GetAddressTransactionsParams defines parameters for GetAddressTransactions.
type GetAddressTransactionsParams struct {
	// Pagination Pagination
	Pagination *PaginationFilter `form:"pagination,omitempty" json:"pagination,omitempty"`
}

// GetValidatorsParams defines parameters for GetValidators.
type GetValidatorsParams struct {
	// Week Week to filter by
	Week WeekFilter `form:"week" json:"week"`

	// Pagination Pagination
	Pagination *PaginationFilter `form:"pagination,omitempty" json:"pagination,omitempty"`
}

// GetValidatorsTotalParams defines parameters for GetValidatorsTotal.
type GetValidatorsTotalParams struct {
	// Filter Week to filter by
	Filter WeekFilter `form:"filter" json:"filter"`
}

// AsDag returns the union data inside the PaginatedResponse_Data_Item as a Dag
func (t PaginatedResponse_Data_Item) AsDag() (Dag, error) {
	var body Dag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDag overwrites any union data inside the PaginatedResponse_Data_Item as the provided Dag
func (t *PaginatedResponse_Data_Item) FromDag(v Dag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDag performs a merge with any union data inside the PaginatedResponse_Data_Item, using the provided Dag
func (t *PaginatedResponse_Data_Item) MergeDag(v Dag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPbft returns the union data inside the PaginatedResponse_Data_Item as a Pbft
func (t PaginatedResponse_Data_Item) AsPbft() (Pbft, error) {
	var body Pbft
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPbft overwrites any union data inside the PaginatedResponse_Data_Item as the provided Pbft
func (t *PaginatedResponse_Data_Item) FromPbft(v Pbft) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePbft performs a merge with any union data inside the PaginatedResponse_Data_Item, using the provided Pbft
func (t *PaginatedResponse_Data_Item) MergePbft(v Pbft) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTransaction returns the union data inside the PaginatedResponse_Data_Item as a Transaction
func (t PaginatedResponse_Data_Item) AsTransaction() (Transaction, error) {
	var body Transaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransaction overwrites any union data inside the PaginatedResponse_Data_Item as the provided Transaction
func (t *PaginatedResponse_Data_Item) FromTransaction(v Transaction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransaction performs a merge with any union data inside the PaginatedResponse_Data_Item, using the provided Transaction
func (t *PaginatedResponse_Data_Item) MergeTransaction(v Transaction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidator returns the union data inside the PaginatedResponse_Data_Item as a Validator
func (t PaginatedResponse_Data_Item) AsValidator() (Validator, error) {
	var body Validator
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidator overwrites any union data inside the PaginatedResponse_Data_Item as the provided Validator
func (t *PaginatedResponse_Data_Item) FromValidator(v Validator) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidator performs a merge with any union data inside the PaginatedResponse_Data_Item, using the provided Validator
func (t *PaginatedResponse_Data_Item) MergeValidator(v Validator) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PaginatedResponse_Data_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginatedResponse_Data_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
